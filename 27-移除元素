//解法1
var removeElement = function (nums, val) {
    let length = nums.length
    for (let i = 0; i < length; i++) {
        if (nums[i] !== val) {
            nums.push(nums[i]);
        }
    }
    nums.splice(0, length);
    return nums.length;
};


// 解法2
 var removeElement = function(nums, val) {
   for(let i = 0; i < nums.length;) {
     if(nums[i] === val) {
       nums.splice(i, 1);
     } else {
       i++;
     }
   }
   return nums.length;
};



// 解法3 双指针 右指针 
// right 指向当前将要处理的元素，左指针 left 指向下一个将要赋值的位置。
// 如果右指针指向的元素不等于 val，它一定是输出数组的一个元素，我们就将右指针指向的元素复制到左指针位置，
//然后将左右指针同时右移； 如果右指针指向的元素等于 \textit{val}val，它不能在输出数组里，此时左指针不动，右指针右移一位。
var removeElement2 = function(nums, val) {
var removeElement2 = function(nums, val) {
  let n = nums.length;
  let left = 0;
  for(let right = 0; right < n; right++) {
    if(nums[right] !== val) {
      nums[left]  = nums[right];
      left++;
    }
  }
  return left;
};

//解法4 双指针优化 
//如果要移除的元素恰好在数组的开头，例如序列 [1,2,3,4,5][1,2,3,4,5]，当 val 为 11 时，
//我们需要把每一个元素都左移一位。注意到题目中说：「元素的顺序可以改变」。实际上我们可以直接将最后一个元素 55 移动到序列开头，取代元素 11，
//得到序列 [5,2,3,4],[5,2,3,4]，同样满足题目要求。这个优化在序列中val 元素的数量较少时非常有效。
//实现方面，我们依然使用双指针，两个指针初始时分别位于数组的首尾，向中间移动遍历该序列
var removeElement3 = function(nums, val) {
  let left = 0;
  let right  = nums.length;
  while(left < right) {
    if(nums[left] === val) {
      nums[left] = nums[right - 1];
      right--;
    }else {
      left++;
    }
  };
  return left;
}
