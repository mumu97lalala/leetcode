// 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。

// 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

// 你可以按任意顺序返回答案。

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function (nums, target) {
    let res = [];
    for (let i = 0; i < nums.length - 1; i++) {
        for (let j = i + 1; j < nums.length; j++) {
            if (nums[i] + nums[j] === target) {
                res.push(i);
                res.push(j);
                break;
            }
        }
    }
    return res;
};


// 更优解
function twoSum1(nums, target) {
    let map = {}
    for(let i = 0; i < nums.length; ++i) {
        const rest = target - nums[i];
        if(map[rest] !== undefined) {
            // 注意这里map里面的是下标比较小的值。
            return [map[rest], i]
        }  
        map[nums[i]] = i 
    }
    return []
};
